@page "/chatclient"
@rendermode InteractiveServer
@using CS3500.Networking

<PageTitle>Chat Client</PageTitle>

<h1>Chat Client</h1>

<div id="ConnectionInputs">
    <div class="input-row">
        <label for="url">Server Address: </label>
        <input id="url" disabled="@network.IsConnected" type="text" @bind="ServerNameOrAddress" />

        <label for="port">Port: </label>
        <input id="port" disabled="@network.IsConnected" type="number" @bind="ServerPort" class="port" />

        @if (network.IsConnected)
        {
            <button class="btn btn-primary" @onclick="DisconnectFromServer">Disconnect</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="ConnectToServer">Connect</button>
        }
    </div>

    @{
        bool disconnected = !network.IsConnected;
        string grayedOut = disconnected ? "grayedOut" : string.Empty;
    }

    <div class="input-row">
        <label for="message">Message: </label>
        <input id="message"
               class="@grayedOut"
               disabled="@(disconnected)"
               type="text"
               @bind="CurrentMessage"
               @bind:event="oninput"
               @onkeyup="HandleKeyPress" />
    </div>

    <div class="input-row">
        <div class="input-col">
            <div id="Messages" class="container @grayedOut">
                @foreach (var line in AllMessages)
                {
                    <span>@line</span>
                }
            </div>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// Default server name
    /// </summary>
    private string ServerNameOrAddress = "localhost";

    /// <summary>
    /// Default server port
    /// </summary>
    private int ServerPort = 11000;
    
    /// <summary>
    /// Current message being typed
    /// </summary>
    private string CurrentMessage = "";

    /// <summary>
    /// The NetworkConnection object representing a connection with the server
    /// </summary>
    private NetworkConnection network = null!;

    /// <summary>
    /// All messages in the chat, newest first
    /// </summary>
    private List<string> AllMessages = new();
    
    /// <summary>
    /// Private boolean returning the state of the connection.
    /// </summary>
    private bool isDisconnected = false;
    

    /// <summary>
    /// Disconnects from the server and updates UI
    /// </summary>
    private void DisconnectFromServer()
    {
        if (isDisconnected) return;  // Prevents multiple disconnect attempts
        isDisconnected = true;

        try
        {
            network.Disconnect();
            AllMessages.Insert(0, "Disconnected from server");
        }
        catch (Exception ex)
        {
            AllMessages.Insert(0, $"Error during disconnection: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    /// <summary>
    /// Handles key press events in the message input
    /// </summary>
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(CurrentMessage))
        {
            try
            {
                // Immediately add the message to the client's chat box with a timestamp
                var timestampedMessage = $"{DateTime.Now:HH:mm tt} - You: {CurrentMessage}";
                AllMessages.Insert(0, timestampedMessage);

                // Send the message to the server
                network.Send(CurrentMessage);
                CurrentMessage = "";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                AllMessages.Insert(0, $"Error sending message: {ex.Message}");
                DisconnectFromServer();
            }
        }
    }

    /// <summary>
    /// Connects to the server and starts message handling
    /// </summary>
    private void ConnectToServer()
    {
        isDisconnected = false;  // Reset disconnection state before connecting

        try
        {
            network.Connect(ServerNameOrAddress, ServerPort);
            AllMessages.Insert(0, "Connected to server");

            new Thread(() =>
                {
                    while (network.IsConnected)
                    {
                        try
                        {
                            var message = network.ReadLine();
                            if (message == null) // If null, the server has closed the connection
                            {
                                AllMessages.Insert(0, "Disconnected from server");
                                InvokeAsync(StateHasChanged);
                                DisconnectFromServer();
                                break;
                            }
                    
                            var timestampedMessage = $"{DateTime.Now:HH:mm tt} - {message}";
                            AllMessages.Insert(0, timestampedMessage);
                            InvokeAsync(StateHasChanged);
                        }
                        catch (Exception ex)
                        {
                            InvokeAsync(() =>
                            {
                                DisconnectFromServer();
                                StateHasChanged();
                            });
                            break;
                        }
                    }
                })
                { IsBackground = true }.Start();
        }
        catch (Exception ex)
        {
            AllMessages.Insert(0, $"Failed to connect to server: {ex.Message}");
            isDisconnected = true;  // Ensure the flag is reset if connection fails
            StateHasChanged();
        }
    }

    /// <summary>
    /// Initialize the network connection
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        network = new NetworkConnection();
    }
}